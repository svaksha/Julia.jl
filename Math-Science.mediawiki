==  Documentation ==
* [http://docs.julialang.org/en/release-0.2/manual/mathematical-operations/ Mathematical Operations] and a [https://github.com/JuliaLang/julia/blob/master/src/julia-parser.scm#L1-L19 list of all overloadable operators] in Julia.
* [http://julialang.org/Graphs.jl/index.html Documentation for Graphs.jl], a Julia package that provides graph types and algorithms.

= MATH =
* A hierarchy of [https://github.com/alrahimi/algebra/ abstract algebraic structures] in Julia.
* [https://github.com/ViralBShah/SemiringAlgebra.jl Semiring Algebra]
* [https://github.com/timholy/Cartesian.jl Cartesian.jl]: Fast multidimensional algorithms.
* [https://github.com/johnmyleswhite/Calculus.jl Calculus.jl]
* [https://github.com/jiahao/RandomMatrices.jl/ RandomMatrices.jl]
* [https://github.com/natj/CellularAutomata.jl Cellular Automata] package.
* GSL.jl:: Julia interface to the [https://github.com/jiahao/GSL.jl GNU Scientific Library] (GSL).
* A wrapper for [https://github.com/lruthotto/MUMPS MUMPS (a MUltifrontal Massively Parallel sparse direct Solver of large linear systems)] in Julia.
* GaussQuadrature.jl: Another package that generates the [https://github.com/billmclean/GaussQuadrature.jl points and weights of the Gauss quadrature rules].
* Blocks.jl:: is a framework to represent [https://github.com/tanmaykm/Blocks.jl chunks of entities and parallel methods on them].
* Church.jl:: helps you [https://github.com/LaurenceA/Church.jl perform inference in complex, and simple, probabilistic models].
* ImmutableArrays.jl:: [https://github.com/twadleigh/ImmutableArrays.jl Statically-sized immutable vectors and matrices].
* [https://github.com/andreasnoackjensen/IterativeLinearSolvers.jl IterativeLinearSolvers.jl]
* JuMP.jl: [https://github.com/IainNZ/JuMP.jl Modelling language for Linear, Integer, and Quadratic Programming]
* KrylovSolvers.jl: Solve sparse linear systems in an efficiently and iterative manner with [https://github.com/cfbaptista/KrylovSolvers.jl Krylov Solvers]
* [https://github.com/lindahua/MATLAB.jl Matlab.jl] and how to [https://github.com/lindahua/MATLAB.jl#readwrite-mat-files read-write MATLAB files].
* NumericExtensions.jl: Julia extensions to provide high performance computational support for [https://github.com/lindahua/NumericExtensions.jl fast vectorized computation]
* [https://github.com/cfbaptista/PolyMath.jl PolyMath.jl]: package for polynomial arithmetic, calculus, interpolation and quadrature algorithms implemented in Julia.
* [https://github.com/JuliaOpt/Optim.jl Optim.jl]: basic optimization algorithms implementation.
* Quadrature.jl: [https://github.com/kofron/Quadrature.jl Gauss quadrature in Base]
* Roots.jl: [https://github.com/JuliaLang/Roots.jl Root finding functions for Julia]
* [https://github.com/jverzani/SymPy.jl Julia interface to SymPy via PyCall]
* [https://github.com/davidavdav/NamedArray NamedArray], a Julia type that implements a drop-in replacement of Array with named dimensions and Dict-type indexes.
* GLM:: [https://github.com/simonster/Glmnet.jl Julia wrapper for fitting Lasso/ElasticNet GLM models using glmnet]
* Julia port of [https://github.com/lejon/TSne.jl  L.J.P. van der Maaten and G.E. Hinton's T-SNE visualisation technique]. Read about the [http://homepage.tudelft.nl/19j49/t-SNE.html t-Distributed Stochastic Neighbor Embedding].
* SortingAlgorithms.jl: [https://github.com/JuliaLang/SortingAlgorithms.jl extra sorting algorithms extending Julia's sorting API]
* PowerSeries.jl:: [https://github.com/jwmerrill/PowerSeries.jl Truncated Power Series] for Julia, which exports a Series type that represents a truncated power series by its coefficients. You can do arithmetic on Series and apply functions to series just as you would Real or Complex numbers.
* Quat.jl:: [https://github.com/forio/Quat.jl Quaternions, octonions and dual-quaternions].


== Cryptography ==
* Nettle is a [https://github.com/staticfloat/Nettle.jl  simple wrapper around libnettle, a cryptographic library].


== Finance / Quant ==
* [https://github.com/JuliaQuant Julia Quant] group.
* [https://github.com/aviks/Ito.jl ITO.jl]an open source toolkit for financial computing in Julia.


== Operations Research ==
* [http://iaindunning.com/2013/combination-locks.html Solving a Combination Lock Puzzle with JuMP + Julia] and the [https://news.ycombinator.com/item?id=6425160 HackerNews thread].



== PHYSICS ==
* [https://github.com/kofron/Codata.jl Codata.jl]
* [https://github.com/ggggggggg/Physical.jl Physical.jl]
