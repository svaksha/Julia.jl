AI, Algorithms, Bioinformatics, Biotech, Data Mining, Data Structures, Machine Learning, NLP, ...

== Bioinformatics, Biotech ==
* [https://github.com/forio/GeneticAlgorithms.jl GeneticAlgorithms.jl] is a lightweight framework that simplifies the process of creating genetic algorithms and running them in parallel.
* Circuitscape.jl:: A [https://github.com/tanmaykm/Circuitscape.jl Julia implementation] of the [http://www.circuitscape.org/ Circuitscape] lib in Python, that uses electronic circuit theory to solve problems in landscape ecology.


== Bloom Filters ==
* [https://github.com/johnmyleswhite/BloomFilters.jl Bloom filters] are a probabilistic data structure that can be used to test the inclusion and exclusion of items in a list.

== Data Structures ==
* [http://julialang.org/Graphs.jl/index.html Documentation for Graphs.jl], a Julia package that provides graph types and algorithms.

== Clustering algorithms ==
* Clustering.jl:: Basic functions for [https://github.com/johnmyleswhite/Clustering.jl [clustering data: k-means, dp-means], etc..


== Machine Learning, Data Mining ==
* [https://github.com/bensadeghi/DecisionTree.jl Decision Tree]
* The [https://github.com/johnmyleswhite/kNN.jl K-nearest neighbors] algorithm in Julia.


== NLP ==
* Julia package for [https://github.com/johnmyleswhite/TextAnalysis.jl text analysis].
* The [https://github.com/lindahua/DataStructures.jl DataStructures.jl] package also has Peter Norvig's spelling corrector ported to Julia as a default dictionary implementation.
* [https://github.com/iamed2/PyLexYacc.jl PyLexYacc.jl], an interface to Python Lex-Yacc package that uses reflection for most of its processing. 


== Nonlinear Optimization ==
* NLopt.jl:: Package to call the [https://github.com/JuliaOpt/NLopt.jl NLopt nonlinear-optimization library] from the Julia language.


== Common Search Algorithms ==
* NearestNeighbors.jl:: [https://github.com/johnmyleswhite/NearestNeighbors.jl Data structures for nearest neighbor search].
* Loess.jl:: is a loess implementation based on the [https://github.com/dcjones/Loess.jl fast kd-tree based approximation algorithm], a space-partitioning data structure for organizing points in a k-dimensional space.
